{"componentChunkName":"component---src-templates-blog-post-js","path":"/command-line-tricks-i-wish-i-knew-sooner/","webpackCompilationHash":"102a6d25c08655a337a6","result":{"data":{"site":{"siteMetadata":{"title":"code drip ☕","author":"Aaron Jack"}},"markdownRemark":{"id":"f376c982-6c3f-54f5-a7c3-5d702a6c6b9b","excerpt":"Terminal micro-optimizations improve your quality of lifeI’ve stumbled upon these small tricks over the past few years.While they are simple, they make a huge…","html":"<h2>Terminal micro-optimizations improve your quality of life</h2>\n<p>I’ve stumbled upon these small tricks over the past few years.</p>\n<p>While they are simple, they make a huge difference to your workflows and developer happiness.</p>\n<h2>| jq .</h2>\n<p>if you run <code class=\"language-text\">brew install jq</code> on Mac OS, you get a magical tool.</p>\n<p>Now you can pipe any JSON string into jq (whether it’s the result of an API, reading a log file or stream, or config) and have a formatted, colorized version for free</p>\n<h2>window stacking</h2>\n<p>iTerm has become my go-to for some reason, not that it’s too much better than the standard mac terminal.</p>\n<p>One thing I use constantly is stacking windows — you can open a new one with\n<code class=\"language-text\">cmd + shift + d</code></p>\n<p>I group things together this way, for example a running server window, test window, and file explorer window.</p>\n<p>It’s much better than switching tabs</p>\n<h2>PS1 builder</h2>\n<p>A fun one. My co-worker recently showed me this.</p>\n<p>You can build a custom prompt, and more important than the vanity, you get the current directory right there.</p>\n<p><a href=\"http://bashrcgenerator.com/\">http://bashrcgenerator.com/</a></p>\n<p>just paste it in your <code class=\"language-text\">~/.bashrc</code></p>\n<p>It sounds dumb but I really like looking at it.</p>\n<h2>vim syntax highlighting</h2>\n<p>It took me way too long to start using this</p>\n<p>Just open / create a <code class=\"language-text\">~/.vimrc</code> and add a single line: <code class=\"language-text\">syntax:on</code></p>\n<p>vim is so much easier to use now, and less error prone when dealing with those quick files that need creating or editing.</p>\n<h2>alias everything</h2>\n<p>You probably know you can set custom commands in <code class=\"language-text\">~/.bashrc</code> by setting <code class=\"language-text\">alias=</code> </p>\n<p>But my workflow really sped up when I started to alias every single common command.</p>\n<p>For example, common directory changes I started using\n<code class=\"language-text\">alias cddw=&quot;cd ~/Downloads&quot;</code></p>\n<p>Even things that auto-complete, it’s much faster to type 5 key strokes then auto completing with tab. Try it.</p>\n<h4>done!</h4>","frontmatter":{"title":"Command line tricks I wish I knew earlier","date":"July 03, 2019","description":"If only someone gave me a list of these when I started programming"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/command-line-tricks-i-wish-i-knew-sooner/","previous":{"fields":{"slug":"/the-easy-way-to-use-typescript-with-react/"},"frontmatter":{"title":"The easy way to use Typescript with React"}},"next":null}}}